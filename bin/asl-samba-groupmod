#!/usr/bin/env ruby

require 'active_samba_ldap'
require 'active_samba_ldap/command'

argv, opts, options = ActiveSambaLdap::Command.parse_options do |opts, options|
  options.members_to_add = nil
  options.members_to_delete = nil

  opts.banner += " GROUP_NAME"

  opts.on("-a", "--add-members=MEMBER1,MEMBER2,MEBMER3", Array,
          "add members (comma delimited)") {|options.members_to_add|}
  opts.on("-d", "--delete-members=MEMBER1,MEMBER2,MEBMER3", Array,
          "delete members (comma delimited)") {|options.members_to_delete|}
end

name = nil
if argv.size == 1
  name = argv.first
else
  $stderr.puts opts
  exit 1
end

unless Process.uid.zero?
  $stderr.puts "need root authority."
  exit 1
end

ActiveSambaLdap::Base.establish_connection("update")

class Group < ActiveSambaLdap::Group
  ldap_mapping
end

class User < ActiveSambaLdap::User
  ldap_mapping
end

class Computer < ActiveSambaLdap::Computer
  ldap_mapping
end

unless Group.exists?(name)
  $stderr.puts "group '#{name}' doesn't exist."
  exit 1
end
group = Group.find(name)

if options.members_to_add and options.members_to_delete
  duplicated_members = options.members_to_add & options.members_to_delete
  unless duplicated_members.empty?
    message = "there are duplicated members in adding and deleting members: "
    message << duplicated_members.join(", ")
    $stderr.puts message
    exit 1
  end
end

if options.members_to_add
  users = []
  computers = []
  options.members_to_add.each do |member|
    if /\$$/ =~ member
      computers << Computer.find(member)
    else
      users << User.find(member)
    end
  end
  group.users.concat(users)
  group.computers.concat(computers)
end

if options.members_to_delete
  users = []
  computers = []
  options.members_to_delete.each do |member|
    if /\$$/ =~ member
      computers << Computer.find(member)
    else
      users << User.find(member)
    end
  end
  group.users -= users
  group.computers -= computers
end

unless group.save
  group.errors.each_full do |message|
    $stderr.puts(message)
  end
  exit 1
end

ActiveSambaLdap::Base.restart_nscd

ActiveSambaLdap::Base.clear_active_connections!
