#!/usr/bin/env ruby

require 'active_samba_ldap'
require 'active_samba_ldap/command'

argv, opts, options = ActiveSambaLdap::Command.parse_options do |opts, options|
  options.gid = nil
  options.allow_non_unique_gid_number = false
  options.new_group_name = nil
  options.members_to_add = nil
  options.members_to_delete = nil

  opts.banner += " GROUP_NAME"

  opts.on("-g", "--gid=GID", "gid") {|options.gid|}
  opts.on("--[no-]allow-non-unique-gid",
          "gid can be non unique " +
          "(#{options.allow_non_unique_gid_number})") do |bool|
    options.allow_non_unique_gid_number = bool
  end
  opts.on("-r", "--rename=NEW_NAME",
          "new group name") {|options.new_group_name|}
  opts.on("-m", "--add-members=MEMBER1,MEMBER2,MEBMER3", Array,
          "add members (comma delimited)") {|options.members_to_add|}
  opts.on("-d", "--delete-members=MEMBER1,MEMBER2,MEBMER3", Array,
          "delete members (comma delimited)") {|options.members_to_delete|}
end

name = nil
if argv.size == 1
  name = argv.first
else
  puts opts
  exit 1
end

unless Process.uid.zero?
  puts "need root authority."
  exit 1
end

ActiveSambaLdap::Base.establish_connection({}, false)

class Group < ActiveSambaLdap::Group
  ldap_mapping
end

class User < ActiveSambaLdap::User
  ldap_mapping
end

class Computer < ActiveSambaLdap::Computer
  ldap_mapping
end

group = Group.new(name)
unless group.exists?
  puts "group '#{name}' doesn't exist."
  exit 1
end

if options.gid
  begin
    group.change_gid_number(options.gid, options.allow_non_unique_gid_number)
  rescue ActiveSambaLdap::GidNumberAlreadyExists
    puts $!.message
    exit 1
  end
end

if options.members_to_add and options.members_to_delete
  duplicated_members = options.members_to_add & options.members_to_delete
  unless duplicated_members.empty?
    message = "there are duplicated members in adding and deleting members: "
    message << duplicated_members.join(", ")
    puts message
    exit 1
  end
end

if options.members_to_add
  options.members_to_add.each do |member|
    group.add_member(member)
  end
end

if options.members_to_delete
  options.members_to_delete.each do |member|
    group.remove_member(member)
  end
end

group.save!

if options.new_group_name
  new_group = Group.new(options.new_group_name)
  if new_group.exists?
    puts "group '#{options.new_group_name}' always exists."
    exit 1
  end

  new_group.attributes = group.attributes.reject do |key, value|
    %w(cn).include?(key)
  end
  new_group.save!
  group.primary_members(true).each do |member|
    member.change_group(new_group.gidNumber(true))
  end
  group.destroy(:remove_members => true)
end

ActiveSambaLdap::Base.restart_nscd

ActiveSambaLdap::Base.close
